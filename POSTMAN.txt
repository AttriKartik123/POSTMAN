Types of APIs
Medium
While this course will focus on Web APIs, it is important to know that "API" can apply to a broad range of interfaces.

Hardware APIs
Interface for software to talk to hardware.
Example: How your phone's camera talks to the operating system. 

Software Library APIs
Interface for directly consuming code from another code base.
Example: Using methods from a library you import into your application.

Web APIs
Interface for communicating across code bases over a network.
Example: Fetching current stock prices from a finance API over the internet.
Multiple API types may be used to achieve a task. For example, uploading a photo to Instagram makes use of various APIs:

Hardware API for the app to talk to your camera

Software library API for the image to be processed with filters

Web API for sending your image to Instagram's servers so your friends can like it!





REST APIs
Some traits of REST APIs include not storing session state between requests, the ability to cache, and the ability to send and receive various data types. Still confused? Don't worry; we will learn hands-on very soon in this course!

Access
APIs also vary in the scope of who can access them.

Public APIs (aka Open APIs)
Consumed by anyone who discovers the API

Private APIs
Consumed only within an organization and not made public

Partner APIs
Consumed between one or more organizations that have an established relationship
The API we will use in this course will be a Public, REST, Web API 👀.


Postman has a vision for an API First World - one where 100 million developers are connected through APIs, and APIs take center stage as primary building blocks. In the API-first world:

APIs are considered a #1 priority
APIs are easily consumable
APIs are easily discoverable





 Set the request method to GET, and the request URL to GET https://library-api.postmanlabs.com/books
 View the response
If everything goes well, you will see a response from the server in the lower half of Postman.

It should look like this: a JSON (JavaScript Object Notation) response body with an array of book objects. You can scroll down to see more books.
When we make an HTTP call to a server, we specify a request method that indicates the type of operation we are about to perform. These are also called HTTP verbs.

Some common HTTP request methods correspond to the CRUD operations mentioned earlier. You can see a list of more methods here.

Method name	Operation
GET	Retrieve data (Read)
POST	Send data (Create)
PUT/PATCH	Update data (Update)

* PUT usually replaces an entire resource, whereas PATCH usually is for partial updates
DELETE	Delete data (Delete)
Since we are "getting" books and not modifying any data, it makes sense that we are making a GET request. 

These are just conventions - it all depends on how the API is coded. To know which method to use, always read the documentation for the API you're working with!



In addition to a request method, a request must include a request URL that indicates where to make the API call. A request URL has three parts: a protocol (such as http:// or https://), host (location of the server), and path (route on the server). In REST APIs, the path often points to a reference entity, like "books".

Protocol	Host	Path
https://	library-api.postmanlabs.com	/books
Paths and complete URLs are also sometimes called API endpoints.

Response status codes
The Postman Library API v2 has returned a response status code of "200 OK". Status codes are indicators of whether a request failed or succeeded.

Status codes have conventions. For example, any status code starting with a "2xx" (a "200-level response") represents a successful call. Get familiar with other status code categories:

Code range	Meaning	Example
2xx	Success	200 - OK
201 - Created
204 - No content (silent OK)
3xx	Redirection	301 - Moved (path changed)

4xx	Client error	400 - Bad request
401 - Unauthorized
403 - Not Permitted
404 - Not Found
5xx	Server error	500 - Internal server error
502 - Bad gateway
504 - Gateway timeout

Request-Response pattern
Now you can understand the request response pattern, which represents how computers communicate over a network. An API is the interface that lets us know what kind of response to expect when we make certain calls to a server. 

You made an HTTP GET request to https://library-api.postmanlabs.com/books and received a response from the server.

Diagram of the request-response pattern. A client makes a request over a network to hit a server, which interprets the request, processes it, and sends back a response over the network

The client is the agent making a request. A client could be a browser or an application you have coded, for example. In our case Postman is the client because that's how we sent the request. 

The request is sent over a network to some server. In our case, we made a request over the public internet to a server located at the address https://library-api.postmanlabs.com. 

The server interpreted the request (GET /books) and sent the appropriate response over the network back to the Postman client: a list of books.

That's it!





Variables in Postman
Postman allows you to save values as variables to reuse them and easily hide sensitive information like API Keys. 

We will use a variable to replace our base URL so that we don't have to type that repeatedly. Once a variable is defined, you can access its value using double curly brace syntax like this: {{variableName}}

Set the "baseUrl" variable
In Postman, you can quickly create a variable by selecting text. Below the video is a step-by-step breakdown of how to set your variable.

Go to the "get books" request in your collection.
With your cursor, select the entire base URL of the API (https://library-api.postmanlabs.com). Do not include the slash / after .com.

Click "Set as variable" to save the base URL to a variable.

 Click "Set as a new variable".

 Name your new variable "baseUrl" and select "Collection" as the scope, then click Set variable.

 Now that the variable is set, you can access the value anywhere in your collection by typing {{baseUrl}}

Hover over {{baseUrl}}. You will see its current value is set to https://library-api.postmanlabs.com

Please save and send the request; it will work exactly like before! You should get a status 200 OK response with a list of books.

Where are my variables?
You can find Collection variables in your collection.

Click on your collection, then the Variables tab. Here you can view and edit your variables.

Initial Value - the value initially set when someone forks or imports your collection. Note that if you share your collection with others, they will see this value, so don't put any secrets here!

Current Value - Postman always resolves the variable to this value. This is local to your Postman account, and not public. It is good to keep secrets like API Keys ONLY in this column and not include them in the Initial Value column.

 

// QUERY PARAMETERS
Query parameters
Remember that the minimum ingredients you need to make a request are:

a request method (GET/POST/PUT/PATCH/DELETE, etc)
a request URL
Some APIs allow you to refine your request further with key-value pairs called query parameters. 

Query parameter syntax
Query parameters are added to the end of the path. They start with a question mark ?, followed by the key-value pairs in the format: <key>=<value>. For example, this request might fetch all photos that have landscape orientation:

GET https://some-api.com/photos?orientation=landscape

If there are multiple query parameters, each is separated by an ampersand &. Below two query parameters to specify the orientation and size of the photos to be returned:

GET https://some-api.com/photos?orientation=landscape&size=500x400

Search Google - with query parameters!
Try pasting this URL into your browser or as a GET request in Postman to make a Google search for "Postman". (If you use Postman, click the "Preview" tab in the response to view the rendered HTML!)

https://www.google.com/search?q=postman

This request adds a search term as a query parameter q=postman ("q" refers to "query" here) to the GET /search path on Google's server.

Because this parameter is in our request, the server returns an HTML document that is a search results page with hits for "Postman". The search bar is pre-populated with our query "Postman".

When to use query parameters?
The answer is always: read the API documentation!

Sometimes, query parameters are optional and allow you to add filters or extra data to your responses. Sometimes, they are required in order for the server to process your request. APIs are implemented differently to fulfill different needs. 

The Postman Library API v2 allows you to add optional query parameters on requests to GET /books filter the books that come back in response. Let's try it out next!



Another way of passing request data to an API is via path variables (a.k.a. "path parameters"). A path variable is a dynamic section of a path and is often used for IDs and entity names such as usernames. 

Path Variable syntax
The path variable comes immediately after a slash in the path. For example, the GitHub API allows you to search for GitHub users by providing a username in the path in place of {username} below: 

GET https://api.github.com/users/{username}

Making this API call with a value for {username} will fetch data about that user:

GET https://api.github.com/users/postmanlabs

You can have multiple path variables in a single request, such as this endpoint for getting a user's GitHub code repository:

GET https://api.github.com/repos/{owner}/{repoName}

For example, to get information about the newman code repository from postmanlabs:

GET https://api.github.com/repos/postmanlabs/newman

Path vs. query parameters
At first, it is easy to confuse these two parameter types. Let's compare them side by side. 

Path Variable	Query parameters
ex: /books/abc123	ex: /books?search=borges&checkedOut=false
Located directly after a slash in the path. It can be anywhere on the path	Located only at the end of a path, right after a question mark ?
Accepts dynamic values	Accepts defined query keys with potentially dynamic values.
* Often used for IDs or entity names	* Often used for options and filters
* These are just conventions! Some APIs might ask you to pass an ID or username in a query parameter like this: /users?username=getpostman

When to use path variable?
Always read the API documentation! If a path parameter is required, the documentation will mention this.

Note that some API documentation uses colon syntax to represent a wildcard in the path like /users/:username, while some use curly braces like /users/{username}. They both mean the same thing: that part of the path is dynamic!

 Hover over your Postman Library API v2 Collection, click the three dots icon and select Add request. Name your new request "add book" 

 Set the request method to POST and the request URL to 
{{baseUrl}}/books
 This endpoint requires adding a body to our request to send a payload. Our payload will be a JSON object containing the information about the book we are adding.

Click the Body tab of the request and select that data type raw > JSON

Think of a book you love or have read recently.

Inside the Body editor, add a JSON object with details about the new book's title, author, genre and yearPublished.

You can copy this object and replace the values with details about your book!
{
  "title": "To Kill a Mockingbird",
  "author": "Harper Lee",
  "genre": "fiction",
  "yearPublished": 1960
}
 Save and Send your request.
 
😱 Uh-oh!
The response from the server came back with a status 401 Unauthorized. Remember that 400-level errors are client errors, meaning we made a mistake in our request. 


The body of the response has a message explaining we need to add an api-key to the headers of the request.

Let's fix this error in our next lesson.


Task: Add an authorization header
Some APIs require Authorization (aka Auth) for certain endpoints in order to permit a request.

Authorization
Think about why you might not want an API to have completely open endpoints that anyone can access publicly. It would allow unauthorized people to access data they shouldn't see, or allow bots to flood an API with thousands of calls per second and shut it down. 

There are multiple methods for authorizing a request. Some examples are Basic Auth (username and password), OAuth (delegated authorization), and API Keys (secret strings registered to a developer from an API portal). 

Getting an API Key
APIs that use API Key auth usually allow developers to sign up in a developer portal, where they will receive a random API Key that can be used to authorize their requests to the API. The API Key allows the API to track who is making calls and how often.  

The Postman Library API v2 uses very light protection and does not require you to register for an API Key. You simply have to know it:

Header name: api-key
Header value: postmanrulz

As the documentation shows, the Postman Library API v2 requires adding this header to any requests for adding, updating and deleting books, since these operations change data in the database instead of simply reading them.

Headers
Headers are how we can add metadata about our requests, such as authorization information or specify the data type we want to receive in a response. This is different than the actual payload data we send in the body of a request, such as our new book information.

You can think of headers like the outside of an envelope when you send a letter. The envelope has information about delivering the letter, like proof that you've paid for postage. The actual data "payload" is the letter inside the envelope.

Illustration of Postmanaut delivering a letter on a space bike

 
Add the API Key to the request header

 

On your "add a book" request, click the Headers tab
In the Headers helper table, add the key api-key with a value of postmanrulz
 Save and Send your request. 
🚀 Success!
Your book was added! Now that your request is properly authorized in the header, you should get a 201 Created response with a response body that is an object representing your newly added book!

Your new book has been assigned a random, unique id, and has extra information now, such as it's checkedOut status and when it was added to the library (createdAt)

(optional) View your new book
You can now return to your "get books by id" request, and in the path parameter id replace it with the value of the id you received in the body of the book you added.



Anyone can now see your book when they fetch books!

But wait, it gets easier...
There is an easier way to add Auth in Postman... let's find out next 👀


Task: Use Postman Auth instead!
Postman has an Auth helper that makes authorizing requests even easier!

Delete the api-key header
Before we use the Postman Auth helper, let's remove the hard-coded header we just added on the "add a book" request.

Hover over the api-key header in the Headers tab and click the "x" icon at the right to delete the header. Save your request.

Add Auth to the Collection
The Postman Auth helper can help you add authorization at the request, folder or collection level. Let's add the api-key to our entire collection so that all requests will send the key. 


 

Click on your collection "Postman Library API v2" and select the Authorization (or Auth) tab

Select API Key as the auth Type

Enter the API Key details in the fields below. Key: api-key, Value: postmanrulz, Add to: Header

Save the changes to your collection by clicking the floppy disk icon in the upper right (important!)
All requests inside this collection that use the auth method "Inherit from parent" will have this header attached, and therefore be authorized.

Add a new book
Go back to your "add a book" request and add another book by changing the body in the Body tab

Ensure the Auth method in the Authorization tab of your request is set to "Inherit from parent" to use the API Key we set at the collection level. This is the default behavior for requests.



Save your request and hit Send!

You can send the "get books by id" request again to see your new book with the new id


variables in postman (Continued)
Previously in the "Request Parameters" section of this course, we saw how using a variable saved us time and helped reduce redundant copy-paste of the request URL using the double curly brace syntax like this: {{variableName}}.

Remember, Postman allows you to save values as variables so that you can:  

Reuse values to keep your work DRY (Don’t Repeat Yourself)

Hide sensitive values like API keys from being shared publicly
In this section, we will learn more about variables and introduce better practices that enable us to make dynamic requests. 

Variable scopes
You can set variables that live at various scopes. Postman will resolve to the value at the nearest and narrowest scope.

From broadest to narrowest, these scopes are global, collection, environment, data, and local.

Variable scope

If a variable with the same name is declared in two different scopes, the value stored in the variable with narrowest scope will be used. For example, if there is a global variable named username and a local variable named username, the local value will be used when the request runs.

We will work with collection variables today, which live at the collection level and can be accessed anywhere inside the collection.

In the next section, you will learn how to set a variable via scripting.

LOCAL- DATA - ENVIRONMENT - COLLECTION - GLOBAL variable  ------> GLobal scopes


Scripting in Postman
Postman allows you to add automation and dynamic behaviors to your collections with scripting.

Postman will automatically execute any provided scripts during two events in the request flow:

Immediately before a request is sent: pre-request script (Pre-request Script of Scripts tab).
Immediately after a response comes back: post-response script (Post-response of Scripts tab).
In this lesson, we will focus on writing scripts in the Post-response tab, which are executed when a response comes back from an API.

The pm object
Postman has a helper object named pm that gives you access to data about your Postman environment, requests, responses, variables and testing utilities. 

For example, you can access the JSON response body from an API with: 

pm.response.json()

You can also programmatically get collection variables like the value of baseUrl with:

pm.collectionVariables.get(“baseUrl”)

In addition to getting variables, you can also set them with pm.collectionVariables.set("variableName", "variableValue") like this:

pm.collectionVariables.set(“myVar”, “foo”)

Get ready!
In the next task, we will use scripting and the pm object to set a new book's automatically id as a collection variable so we can use the id in other requests.






Task: Your first script
If you are new to JavaScript - have no fear! Here are some basics.

Logging data 
In JavaScript, you can print data for a value to the console using this syntax:

console.log("Hello world!")
// => Hello world!
Comments
In JavaScript you can add comments to your code. Comments are skipped by the interpreter, so you can use them to explain things in your code if you like. 

// Single line comments start with two slashes. I am not code!

/* You can write multi-line comments by 
opening and closing with slash and asterisk. 
I am not code!
*/

Add a script to your request

 

In your "add a book" request, change the book data in your Body to a new book you like.

From the Scripts tab of your request, open the Post-res tab (short for Post-response)

Inside the Script editor, add this JavaScript code to log the JSON response from the API:
console.log(pm.response.json())
Save your request

Send your request. This will trigger the script in the Post-response script tab to run after the response comes back from the API

Open the Postman Console in the lower left of the window.


 Scroll to the bottom of the logs in the console. You will see your most recent request POST https://library-api.postmanlabs.com/books

console
The response data from the API is logged in the console because of the code in our Scripts tab! You can expand the data by clicking on the small arrow to the left

expanded console object
Congratulations!
You've written your first script. Next, you'll learn how to grab the automatically id of your new book and save it as a collection variable.... using code!

 


 Task: Grab the new book id
Combining the power of variables and scripting gives you superpowers! Let's explore how you can automatically set a value for a variable via scripting.

Saving a value as a variable allows you to use it in other requests. Using a Post-response script, let's grab the id of a newly added book and save it so we can use it in future requests.

Setting and getting collection variables
The pm object allows you to set and get collection variables.

To set a collection variable, use the .set() method with two parameters: the variable name and the variable value

pm.collectionVariables.set("variableName", value)

To get a collection variable use the .get() method and specify the name of the variable you want to retrieve:

pm.collectionVariables.get("variableName")

Local variables
We can also store local variables inside our scripts using JavaScript. 

There are two ways to define a variable in JavaScript: using the const or let keywords. const is for variables that won't change value, whereas let allows you to reassign the value later.

Set the new book id as a variable 

 

In the Body tab of the "add a book" request, change the book's details to add a new book!

In the Post-response tab in Scripts of the "add a book" request, replace the console.log() statement with this code:

// save the "id" value from the response to a variable named "id"
const id = pm.response.json().id
// save the id as a collection variable named "id"
pm.collectionVariables.set("id", id)
The comments above that start with // help explain what the code is doing, and are ignored when we run the script. 

Note: If there is no Collection variable named "id" Postman will create a new variable named id and assign the value.

post-request script

Save and send your request.

When the 201 the response comes back from the API with your newly created book, and the test script will run and save the book's id as a collection variable automatically.




Task: Checkout your book
Someone wants to check out the book you just added!

As a librarian, you will update the library database via the API to mark the book's checkedOut status from false to true.

The API documentation shows we can update a book by id by making a request (authorized with the API Key) with the updated information to:

PATCH https://library-api.postmanlabs.com/books/:id

Make a request to update the book

 

Hover on your Postman Library API v2 collection, click the three dots, and select Add request. Name your new request "checkout a book"

Set the request method to PATCH

Set the request URL to {{baseUrl}}/books/:id 

Set the value of the path variable id to {{id}}.

This will use the value of our collection variable named id that was set in the Test script of the"add a book" request. You can see the value by hovering on your id variable.

Postman screenshot: Set the path variable named id to be the value of the collection variable named id

Add a raw JSON body in the Body tab to update the checkedOut property to true: 

{ 
  "checkedOut": true 
}
Save and Send your request
Note: This request requires Authorization, which is automatically added as we added the collection level auth. The request is set to "Inherit from parent", this will use the API Key set at the collection level on our PATCH request. 
You should get a 200 OK response that shows the updated data about your book. Notice how checkedOut is now true

checkedOut: true

Your book is updated!
Now, if you return to your "get book by id" request, update the id path variable value to {{id}} Save and Send, you will see the same updated data!